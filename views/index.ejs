<!DOCTYPE html>
<html lang= "en">
    <head>
        <title>
        Plasma Bed
        </title>
        <meta name="viewport" charset="utf-8" content="width=device-width, initial-scale=1.0" />
        <script src="creds.js"></script>
         <!-- new css -->
	 <!-- semantic ui config-->
	 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" integrity="sha256-9mbkOfVho3ZPXfM7W8sV2SndrGDuh7wuyLjtsWeTI1Q=" crossorigin="anonymous" />
         <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
        <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript"></script>
        <link id="theme" rel="stylesheet" type="text/css" href="light-theme.css" />
	    <link rel="stylesheet" href="styles.css">
  
    </head>
    <body id="MapPage">
        <div class="ui inverted pointing menu stackable">
            <a id="about" href="/" class="item header">Home</a>
            <a id="index_plasma" href="/index_plasma" class="item">Dashboard</a>
            <a id="map" href="/map" class="item">Track A Bed</a>
            <a id="plasma_bank" href="/plasma_bank" class="item">Plasma Bank</a>
            <a id="log-in" href="/login" class="item">CareNet</a>
            <a id="technology" href="/AboutProject" class="item">About</a>
            <!-- <a id="test" href="/test" class="item">Test</a> -->
            


            
            <div class="ui fluid inverted two column centered grid menu">
                <span class="fluid item" id="status">CareQuest</span>
            </div>
            <a class="item" id="theme-toggle"><i class="moon icon"></i></a> 
            <div class="hamburger">
                <span class="hamburger-bun"></span>
                <span class="hamburger-patty"></span>
                <span class="hamburger-bun"></span>
            </div>
        </div>
	
	<div class="ui center aligned container" id="homepage-container">
        <div id="mapContainer" style="width: 100%; height: 80vh; align-self: center; background-color: aqua;">
            
        </div>
        <style>
            .H_ib_body {
    width: 333px;
}

.H_ib_content{
    min-width: 300px;
    font: 12px "Lucida Grande", Arial, Helvetica, sans-serif;
    line-height: 15px;
    margin: 10px 20px 20px 10px;
}
        </style>

        
    
    <script>
        var platform = new H.service.Platform({
        'apikey': window.hereCreds.JSKEY
        });
        var myPos = {lat:18.52571, lng:74.09815};
        
        // Obtain the default map types from the platform object:
        var defaultLayers = platform.createDefaultLayers();

        // Instantiate (and display) a map object:
        var map = new H.Map(
            document.getElementById('mapContainer'),
            defaultLayers.vector.normal.map,
        {
            zoom: 10,
            pixelRatio: window.devicePixelRatio || 1,
            center: { lat: 18.52571, lng: 74.09815 }
        });

        // Create the default UI:
        var ui = H.ui.UI.createDefault(map, defaultLayers,'en-US');
        ui.getControl('mapsettings').setDisabled(false)
        ui.getControl('zoom').setDisabled(false)
        ui.getControl('scalebar').setDisabled(false)

        // Positions of the UI components:
        var mapSettings = ui.getControl('mapsettings');
        var scalebar = ui.getControl('scalebar');
        mapSettings.setAlignment('top-left');
        scalebar.setAlignment('bottom-right');


        // Enable the event system on the map instance:
        var mapEvents = new H.mapevents.MapEvents(map);
        var behavior = new H.mapevents.Behavior(mapEvents);

        //style to set at load time

        var provider = map.getBaseLayer().getProvider();

        var style = new H.map.Style('map_style.yaml','https://js.api.here.com/v3/3.1/styles/omv/');
        // set the style on the existing layer
        provider.setStyle(style); 

        map.getViewModel().setLookAtData({
           tilt: 45
        });

        // Define a variable holding SVG mark-up that defines an icon image:
        /* var svgMarkup = '<svg width="24" height="24" ' +
            'xmlns="http://www.w3.org/2000/svg">' +
            '<rect stroke="white" fill="#228B22" x="1" y="1" width="22" ' +
            'height="22" /><text x="12" y="18" font-size="12pt" ' +
            'font-family="Arial" font-weight="bold" text-anchor="middle" ' +
            'fill="white">.</text></svg>'; */
        
        let imgIcon = new H.map.Icon('robot.png');

        function getBrowserPosition(){
            if(navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    console.log(position.coords);
                    var browserPosition = {lat: position.coords.latitude , lng: position.coords.longitude };
                    // Create a marker:
                    var icon = new H.map.Icon('gps.png');
                    let marker = new H.map.Marker(browserPosition, {icon: icon});
                    // Instantiate a circle object (using the default style):
                    var circle = new H.map.Circle({lat: position.coords.latitude + 0.015, lng: position.coords.longitude }, 7500, {style: circleStyle});
                    marker.setData("You're here!");
                    // Add the circle to the map:
                    map.addObject(circle);
                    map.setCenter(browserPosition);
                    map.addObject(marker);
                });
            } else {
                alert("Geolocation is not supported by this browser!");
            }
        }

        // Create a style object:
        var circleStyle = {
        
            strokeColor: 'green',
            fillColor: 'rgba(66, 245, 126, 0.25)',
            opacity: 0.5
  
        };
        

        function clickToMark(){
            // Add event listener:
            map.addEventListener('longpress', function(evt) {
                if(evt.target instanceof H.map.Marker){
                    //bubble
                    // Create an info bubble object at a specific geographic location:
                    var bubble = new H.ui.InfoBubble(evt.target.getGeometry(), {
                    content: evt.target.getData()
             });

                    // Add info bubble to the UI:
                    ui.addBubble(bubble);

                }
                else{
                    // Log 'tap' and 'mouse' events:
                    var cnt =0;
                    console.log(evt); // too much data here (try to minify)
                    let pointer = evt.currentPointer;
                    let pointerPoistion = map.screenToGeo(pointer.viewportX, pointer.viewportY);
                    let pointerMarker = new H.map.Marker(pointerPoistion,{icon: imgIcon, volatility: true});
                    pointerMarker.draggable = true;
                    if(cnt == 0){
                        var userData = prompt("Enter some data for this pointer:");
                        pointerMarker.setData(userData);
                        console.log("Pointer added!");
                    }else{
                        pointerMarker.getData();
                    }

                           
                    map.addObject(pointerMarker);
                }
            });
        }

        function clickDragMarkers(){
                // disable the default draggability of the underlying map
                // and calculate the offset between mouse and target's position
                // when starting to drag a marker object:
                map.addEventListener('dragstart', function(ev) {
                    var target = ev.target,
                        pointer = ev.currentPointer;
                    if (target instanceof H.map.Marker) {
                    var targetPosition = map.geoToScreen(target.getGeometry());
                    target['offset'] = new H.math.Point(pointer.viewportX - targetPosition.x, pointer.viewportY - targetPosition.y);
                    behavior.disable();
                    }
                }, false);


                // re-enable the default draggability of the underlying map
                // when dragging has completed
                map.addEventListener('dragend', function(ev) {
                    var target = ev.target;
                    if (target instanceof H.map.Marker) {
                      
                        
                    behavior.enable();
                    }
                }, false);

                // Listen to the drag event and move the position of the marker
                // as necessary
                map.addEventListener('drag', function(ev) {
                    var target = ev.target,
                        pointer = ev.currentPointer;
                    if (target instanceof H.map.Marker) {
                    target.setGeometry(map.screenToGeo(pointer.viewportX - target['offset'].x, pointer.viewportY - target['offset'].y));
                    }
                }, false);
        }

        function highlightHospital(){

            var hospStyle = provider.getStyle();

            var hospConfig = hospStyle.extractConfig('landuse.hospital');

            hospConfig.layers.landuse.hospital.draw.polygons.color = 'red';

            hospStyle.mergeConfig(hospConfig);

            document.getElementById("status").innerHTML = "All Hospital layers highlighted successfully";
        }
        var str = "not set";
        var end = "not set";
        function setUpClickListener(map) {
        // Attach an event listener to map display
        // obtain the coordinates and display in an alert box.
            document.getElementById("status").innerHTML = "Select START and END points on the map";
            var cnt = 0;
            map.addEventListener('tap', fnc);
            function fnc (evt) {
            var coord = map.screenToGeo(evt.currentPointer.viewportX,evt.currentPointer.viewportY);
            let Pos = {lat: coord.lat , lng: coord.lng };
            
            
            var ans = Pos.lat + ',' + Pos.lng;
            if(cnt==0){
                document.getElementById("status").innerHTML = "START point selected";
                str=ans;
                let strIcon = new H.map.Icon('start.png');
                let strMarker = new H.map.Marker(Pos, {icon: strIcon});
                map.addObject(strMarker);
                strMarker.setData("START for routing!");
                console.log("START: " +ans);
            }
            if(cnt==1){
                document.getElementById("status").innerHTML = "END point selected";
                end=ans;
                let endIcon = new H.map.Icon('end.png');
                let endMarker = new H.map.Marker(Pos, {icon: endIcon});
                map.addObject(endMarker);
                endMarker.setData("END for routing!");
                console.log("END: " +ans);
            }
            
            cnt++;
            if(cnt==2){
                    
                    map.removeEventListener('tap', fnc);
                    alert("Use ROUTE button to trace your path on the map");
            
            }
            //console.log('Clicked at ' + Math.abs(coord.lat.toFixed(4)) +
               // ((coord.lat > 0) ? 'N' : 'S') +
               /// ' ' + Math.abs(coord.lng.toFixed(4)) +
               /// ((coord.lng > 0) ? 'E' : 'W'));
            
            }
            
        }

        function ClickListener(map) {
  // Attach an event listener to map display
  // obtain the coordinates and display in an alert box.
  map.addEventListener('tap', function (evt) {
    var coord = map.screenToGeo(evt.currentPointer.viewportX,
            evt.currentPointer.viewportY);
    console.log(Math.abs(coord.lat.toFixed(4)) +',' + Math.abs(coord.lng.toFixed(4)));
    var lat = Math.abs(coord.lat.toFixed(4));
    var lon = Math.abs(coord.lng.toFixed(4));
    revGeocode(lat,lon);

  });
}
        
        let hosptialIcon = new H.map.Icon('hospital.png');
        function adp(){
            var foundArr = <%- JSON.stringify(foundArr) %>;
             console.log(foundArr.length);
            document.getElementById("status").innerHTML = "Processing Data Points . . .";
            for(i=0;i<=50005*map.getZoom();i++){
               if(i!=4281){ 
                    
                let Pos = {lat: foundArr[i].Y , lng: foundArr[i].X };
                let hospitalMarker = new H.map.Marker(Pos, {icon: hosptialIcon});
                map.addObject(hospitalMarker);
                hospitalMarker.setData("<h2>"+foundArr[i].HOSPITAL_NAME+"</h2><hr><b>Type : </b>"+foundArr[i].HOSPITAL_TYPE+"<br><b>Location</b> : "+foundArr[i].HQ_ADDRESS+", "+foundArr[i].HQ_CITY+", "+foundArr[i].STATE_NAME+" - "+foundArr[i].HQ_ZIP_CODE+"<br><b>No. of Licensed Beds : </b>"+foundArr[i].NUM_LICENSED_BEDS
+"<br><b>No. of Staffed Beds</b> : "+foundArr[i].NUM_STAFFED_BEDS+"<br><b>No. of ICU Beds</b> : "+foundArr[i].NUM_ICU_BEDS+"<br><b>No. of Adult ICU Beds</b> : "+foundArr[i].ADULT_ICU_BEDS+"<br><b>No. of Pediatric ICU Beds</b> : "+foundArr[i].PEDI_ICU_BEDS+"<br><b>Bed Utilization Rate</b> : "+foundArr[i].BED_UTILIZATION+"<br><b>Average Ventilator Usage</b> : "+foundArr[i].AVG_VENTILATOR_USAGE+"<br><b>Potential Increase in Bed Capacity</b> : "+foundArr[i].Potential_Increase_In_Bed_Capac);
                 }
                
            }
            console.log("Data Points Added!");
            document.getElementById("status").innerHTML = "Data Points added successfully";  
        }

        ClickListener(map);

        getBrowserPosition();

        clickToMark();

        clickDragMarkers();
        </script>
        


    <button class="ui button" style="vertical-align: middle; position: relative;" onclick="getBrowserPosition()"><span>My Location</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative;" onclick="highlightHospital()"><span>Highlight Hospitals</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="adp()"><span>Add Data Points</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="geocoderSearch()"><span>Search</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="geocodeAndSearch()"><span>Discover hospitals</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="geocodeBrowse()"><span>Advanced Search</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="setUpClickListener(map);"><span>Routing Points</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="route()"><span>Route</span></button>
    <button class="ui button" style="vertical-align: middle; position: relative; inline-block;" onclick="covid()"><span>COVID Test Sites</span></button> 
        <div class="ui container" id="card4" >
            <div class="ui info message" style="margin-top: 0.1vh;">
                <div class="header">
                    Click on Map to get HelpLine Number for that region!!
                </div>
                Click <a href="https://www.adducation.info/general-knowledge-travel-and-transport/emergency-numbers/"><b>here</b></a> for countrywise list of emergency numbers
            </div>
        </div>
        
        <div class="ui stackable four column grid " id="cards-collector">
            
        </div>
    </div>
  
	<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js" integrity="sha256-t8GepnyPmw9t+foMh3mKNvcorqNHamSKtKRxxpUEgFI=" crossorigin="anonymous"></script>
    <script src="design.js"></script>
    <script type="text/javascript" src="geocoder.js"></script>
    <script type="text/javascript" src="routing.js"></script>
	

       <script>
  window.watsonAssistantChatOptions = {
      integrationID: "3a38c64f-ef6d-4910-b314-78f42d76a652", // The ID of this integration.
      region: "eu-gb", // The region your integration is hosted in.
      serviceInstanceID: "411ae7c2-7181-492b-aa64-fdcaafb19e28", // The ID of your service instance.
      onLoad: function(instance) { instance.render(); }
    };
  setTimeout(function(){
    const t=document.createElement('script');
    t.src="https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js";
    document.head.appendChild(t);
  });
</script>

	
    
</body>
</html>
